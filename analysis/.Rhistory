cosine <- function(x,y) {
return(crossprod(x,y)/sqrt(crossprod(x)*crossprod(y)))
}
# jaccard function
clean_string = function(string) {
string_lower = tolower(string)
string_clean = gsub('[[:punct:] ]+', ' ', string_lower)
}
compute_jaccard = function(sent1, sent2) {
sent1_clean = clean_string(sent1)
sent2_clean = clean_string(sent2)
sent1_vec = text_tokens(sent1_clean, stemmer = "en")[[1]]
sent2_vec = text_tokens(sent2_clean, stemmer = "en")[[1]]
sent_union = union(sent1_vec, sent2_vec)
sent_intersect = intersect(sent1_vec, sent2_vec)
jaccard_score = length(sent_intersect) / length(sent_union)
return(jaccard_score)
}
# function to read data sets (from multiple embedding models)
read_data = function(question_data_path,
question_supplementary_path,
embedding_data_path) {
question_data = read_excel(question_data_path)
question_supplementary = read_excel(question_supplementary_path)
embedding_data = read_csv(embedding_data_path) %>%
rename(row_id = question_id)
# combine the data sets
full_data = question_data %>%
left_join(question_supplementary) %>%
left_join(embedding_data)
# rearrange the dataframe
full_data = full_data %>%
arrange(group_id, form_request, question_id) %>%
group_by(group_id, form_request, question_id, similarity) %>%
mutate(id_x = row_number()) %>%
ungroup() %>%
arrange(group_id, form_request, id_x) %>%
#select(group_id, form_request, id_x, similarity, rfa)
mutate(final_id = paste(group_id, form_request, id_x, sep = '_')) %>%
select(-id_x) %>%
select(final_id, everything())
return(full_data)
}
# function to calculate cosine similarity scores for survey questions of varying degrees of similarity
compute_cosine_h1 = function(input_data){
# make an empty cosine df to store the data
cosine_df = tibble(final_id = character(),
similarity = character(),
cosine_score = numeric(),
jaccard_score = numeric())
# number of trios
n_groups = input_data %>%
select(final_id) %>%
n_distinct()
# unique trio ids
final_ids = input_data %>%
distinct(final_id) %>%
pull()
for (i in 1:n_groups){
data_foo = input_data %>%
filter(final_id == final_ids[i])
embedding_reference = data_foo %>%
filter(similarity == "reference") %>%
select(contains('dim')) %>%
as.numeric()
embedding_similar = data_foo %>%
filter(similarity == "high") %>%
select(contains('dim')) %>%
as.numeric()
embedding_dissimilar = data_foo %>%
filter(similarity == "low") %>%
select(contains('dim')) %>%
as.numeric()
rfa_reference = data_foo %>%
filter(similarity == "reference") %>%
pull(rfa)
rfa_similar = data_foo %>%
filter(similarity == "high") %>%
pull(rfa)
rfa_dissimilar = data_foo %>%
filter(similarity == "low") %>%
pull(rfa)
cosine_value_similar = cosine(embedding_reference,
embedding_similar) %>%
as.numeric()
cosine_value_dissimilar = cosine(embedding_reference,
embedding_dissimilar) %>%
as.numeric()
jaccard_value_similar = compute_jaccard(rfa_reference,
rfa_similar)
jaccard_value_dissimilar = compute_jaccard(rfa_reference,
rfa_dissimilar)
cosine_df = cosine_df %>%
add_row(final_id = final_ids[i],
similarity = 'high',
cosine_score = cosine_value_similar,
jaccard_score = jaccard_value_similar) %>%
add_row(final_id = final_ids[i],
similarity = 'low',
cosine_score = cosine_value_dissimilar,
jaccard_score = jaccard_value_dissimilar)
if (i %% 100 == 0) {
cat(sprintf("Progress: %d/%d\n", i, n_groups))
}
}
return(cosine_df)
}
# function to calculate cosine similarity scores for h2
compute_cosine_h2 = function(input_data) {
# make an empty cosine df to store the data
cosine_df = tibble(final_id = character(),
similarity = character(),
form_request = character(),
cosine_score = numeric(),
jaccard_score = numeric())
# number of trios
n_groups = input_data %>%
select(final_id) %>%
n_distinct()
# unique trio ids
final_ids = input_data %>%
distinct(final_id) %>%
pull()
for (i in 1:n_groups){
data_between = input_data %>%
filter(final_id == final_ids[i],
similarity != "high")
embedding_reference = data_between %>%
filter(similarity == "reference") %>%
select(contains('dim')) %>%
as.numeric()
rfa_reference = data_between %>%
filter(similarity == "reference") %>%
pull(rfa)
embedding_dissimilar = data_between %>%
filter(similarity == "low") %>%
select(contains('dim')) %>%
as.numeric()
rfa_dissimilar = data_between %>%
filter(similarity == "low") %>%
pull(rfa)
cosine_value_dissimilar = cosine(embedding_reference,
embedding_dissimilar) %>%
as.numeric()
jaccard_dissimilar = compute_jaccard(rfa_reference, rfa_dissimilar)
form_request_reference = data_between %>%
filter(similarity == "reference") %>%
pull(form_request)
cosine_df = cosine_df %>%
add_row(final_id = final_ids[i],
similarity = 'dissimilar',
form_request = form_request_reference,
cosine_score = cosine_value_dissimilar,
jaccard_score = jaccard_dissimilar)
question_id_reference = data_between %>%
filter(similarity == "reference") %>%
pull(question_id)
row_id_reference = data_between %>%
filter(similarity == "reference") %>%
pull(row_id)
data_within = input_data %>%
filter(similarity == "reference") %>%
filter(question_id == question_id_reference) %>%
filter(row_id != row_id_reference)
n_forms = nrow(data_within)
j = 1
for (j in 1:n_forms){
embedding_similar = data_within[j, ] %>%
select(contains('dim')) %>%
as.numeric()
rfa_similar = data_within[j, ] %>%
pull(rfa)
cosine_value_similar = cosine(embedding_reference,
embedding_similar) %>%
as.numeric()
jaccard_similar = compute_jaccard(rfa_reference, rfa_similar)
cosine_df = cosine_df %>%
add_row(final_id = final_ids[i],
similarity = 'reference',
form_request = pull(data_within[j, ], form_request),
cosine_score = cosine_value_similar,
jaccard_score = jaccard_similar)
}
}
return(cosine_df)
}
# import synthetic question data and embedding data from multiple embedding models
embedding_data_paths = c('../data/embeddings/synthetic_count.csv',
'../data/embeddings/synthetic_tf_idf.csv',
'../data/embeddings/synthetic_random300.csv',
'../data/embeddings/synthetic_random768.csv',
'../data/embeddings/synthetic_random1024.csv',
'../data/embeddings/synthetic_fasttext.csv',
'../data/embeddings/synthetic_bert_base_uncased.csv',
'../data/embeddings/synthetic_bert_large_uncased.csv',
'../data/embeddings/synthetic_paraphrase_mpnet_base_v2.csv',
'../data/embeddings/synthetic_stsb_mpnet_base_v2.csv',
'../data/embeddings/synthetic_stsb_roberta_base_v2.csv',
'../data/embeddings/synthetic_stsb_roberta_large.csv')
full_data_ls = lapply(embedding_data_paths,
read_data,
question_data_path = '../data/synthetic/Synthetic_Questions_Controlled_Variants.xlsx',
question_supplementary_path = '../data/synthetic/Synthetic_Questions_Controlled.xlsx')
question_short_concept_names = read_excel('../data/synthetic/Synthetic_Questions_Controlled_Shorter_Concept_Names.xlsx') %>%
select(concrete_concept, concrete_concept_reference)
# read the previously saved cosine data
cosine_df_h1_ls = read_rds("cosine_df_h1_ls.rds")
cosine_df_h2_ls = read_rds("cosine_df_h2_ls.rds")
model_ls = c("BOW",
"TF-IDF",
"Random-300",
"Random-768",
"Random-1024",
"FastText",
"BERT-base-uncased",
"BERT-large-uncased",
"PI-MPNet-base",
"STSB-MPNet-base",
"STSB-RoBERTa-base",
"STSB-RoBERTa-large")
for (i in 1:length(model_ls)) {
cosine_df_h1_ls[[i]] <- cosine_df_h1_ls[[i]] %>%
mutate(Model = model_ls[[i]])
cosine_df_h2_ls[[i]] <- cosine_df_h2_ls[[i]] %>%
mutate(Model = model_ls[[i]])
full_data_ls[[i]] <- full_data_ls[[i]] %>%
mutate(Model = model_ls[[i]])
}
question_data = read_excel('../data/synthetic/Synthetic_Questions_Controlled_Variants.xlsx')
question_supplementary = read_excel('../data/synthetic/Synthetic_Questions_Controlled.xlsx')
# compare quantitative differences across similarity conditions
# the similarity scores are grouped within each basic variable type
model_id = 9
cos_diff_df = cosine_df_h1_ls[[model_id]] %>%
left_join(select(full_data_ls[[model_id]], final_id, question_id, similarity, form_request), by = c("final_id", "similarity")) %>%
left_join(select(question_supplementary, -similarity), by = c("question_id")) %>%
group_by(final_id) %>%
mutate(cos_dif = cosine_score - cosine_score[similarity == "low"]) %>%
ungroup() %>%
filter(similarity == "high") %>%
select(final_id, similarity, cosine_score, cos_dif, everything())
cos_diff_df = cosine_df_h1_ls[[model_id]] %>%
left_join(select(full_data_ls[[model_id]], final_id, question_id, similarity, form_request), by = c("final_id", "similarity")) %>%
left_join(select(question_supplementary, -similarity), by = c("question_id")) %>%
group_by(final_id) %>%
mutate(cos_dif = cosine_score - cosine_score[similarity == "low"]) %>%
ungroup() %>%
filter(similarity == "high") %>%
select(final_id, similarity, cosine_score, cos_dif, everything())
cos_diff_df %>%
mutate(cosine_diff_binary = if_else(cos_dif > 0, 1, 0)) %>%
summarise(prop_positive = mean(cosine_diff_binary))
# compare quantitative differences across similarity conditions
# the similarity scores are grouped within each basic variable type
model_id = 10
cos_diff_df = cosine_df_h1_ls[[model_id]] %>%
left_join(select(full_data_ls[[model_id]], final_id, question_id, similarity, form_request), by = c("final_id", "similarity")) %>%
left_join(select(question_supplementary, -similarity), by = c("question_id")) %>%
group_by(final_id) %>%
mutate(cos_dif = cosine_score - cosine_score[similarity == "low"]) %>%
ungroup() %>%
filter(similarity == "high") %>%
select(final_id, similarity, cosine_score, cos_dif, everything())
cos_diff_df %>%
mutate(cosine_diff_binary = if_else(cos_dif > 0, 1, 0)) %>%
summarise(prop_positive = mean(cosine_diff_binary))
# compare quantitative differences across similarity conditions
# the similarity scores are grouped within each basic variable type
model_id = 11
cos_diff_df = cosine_df_h1_ls[[model_id]] %>%
left_join(select(full_data_ls[[model_id]], final_id, question_id, similarity, form_request), by = c("final_id", "similarity")) %>%
left_join(select(question_supplementary, -similarity), by = c("question_id")) %>%
group_by(final_id) %>%
mutate(cos_dif = cosine_score - cosine_score[similarity == "low"]) %>%
ungroup() %>%
filter(similarity == "high") %>%
select(final_id, similarity, cosine_score, cos_dif, everything())
cos_diff_df %>%
mutate(cosine_diff_binary = if_else(cos_dif > 0, 1, 0)) %>%
summarise(prop_positive = mean(cosine_diff_binary))
# compare quantitative differences across similarity conditions
# the similarity scores are grouped within each basic variable type
model_id = 12
cos_diff_df = cosine_df_h1_ls[[model_id]] %>%
left_join(select(full_data_ls[[model_id]], final_id, question_id, similarity, form_request), by = c("final_id", "similarity")) %>%
left_join(select(question_supplementary, -similarity), by = c("question_id")) %>%
group_by(final_id) %>%
mutate(cos_dif = cosine_score - cosine_score[similarity == "low"]) %>%
ungroup() %>%
filter(similarity == "high") %>%
select(final_id, similarity, cosine_score, cos_dif, everything())
cos_diff_df %>%
mutate(cosine_diff_binary = if_else(cos_dif > 0, 1, 0)) %>%
summarise(prop_positive = mean(cosine_diff_binary))
# check each model's performance (as in differentiating conceptually similar from disimilar questions)
cosine_df_h2_ls[[9]] %>%
group_by(final_id, form_request, similarity) %>%
summarise(cosine_score_ave = mean(cosine_score)) %>%
ungroup() %>%
group_by(final_id) %>%
mutate(cosine_diff = cosine_score_ave - cosine_score_ave[similarity == "dissimilar"]) %>%
ungroup() %>%
filter(similarity == "reference") %>%
mutate(cosine_diff_binary = if_else(cosine_diff > 0, 1, 0)) %>%
summarise(prop_positive = mean(cosine_diff_binary))
# check each model's performance (as in differentiating conceptually similar from disimilar questions)
cosine_df_h2_ls[[10]] %>%
group_by(final_id, form_request, similarity) %>%
summarise(cosine_score_ave = mean(cosine_score)) %>%
ungroup() %>%
group_by(final_id) %>%
mutate(cosine_diff = cosine_score_ave - cosine_score_ave[similarity == "dissimilar"]) %>%
ungroup() %>%
filter(similarity == "reference") %>%
mutate(cosine_diff_binary = if_else(cosine_diff > 0, 1, 0)) %>%
summarise(prop_positive = mean(cosine_diff_binary))
# check each model's performance (as in differentiating conceptually similar from disimilar questions)
cosine_df_h2_ls[[11]] %>%
group_by(final_id, form_request, similarity) %>%
summarise(cosine_score_ave = mean(cosine_score)) %>%
ungroup() %>%
group_by(final_id) %>%
mutate(cosine_diff = cosine_score_ave - cosine_score_ave[similarity == "dissimilar"]) %>%
ungroup() %>%
filter(similarity == "reference") %>%
mutate(cosine_diff_binary = if_else(cosine_diff > 0, 1, 0)) %>%
summarise(prop_positive = mean(cosine_diff_binary))
# check each model's performance (as in differentiating conceptually similar from disimilar questions)
cosine_df_h2_ls[[12]] %>%
group_by(final_id, form_request, similarity) %>%
summarise(cosine_score_ave = mean(cosine_score)) %>%
ungroup() %>%
group_by(final_id) %>%
mutate(cosine_diff = cosine_score_ave - cosine_score_ave[similarity == "dissimilar"]) %>%
ungroup() %>%
filter(similarity == "reference") %>%
mutate(cosine_diff_binary = if_else(cosine_diff > 0, 1, 0)) %>%
summarise(prop_positive = mean(cosine_diff_binary))
cosine_df_h2_ls[[12]]
# check each model's performance (as in differentiating conceptually similar from disimilar questions)
cosine_df_h2_ls[[3]] %>%
group_by(final_id, form_request, similarity) %>%
summarise(cosine_score_ave = mean(cosine_score)) %>%
ungroup() %>%
group_by(final_id) %>%
mutate(cosine_diff = cosine_score_ave - cosine_score_ave[similarity == "dissimilar"]) %>%
ungroup() %>%
filter(similarity == "reference") %>%
mutate(cosine_diff_binary = if_else(cosine_diff > 0, 1, 0)) %>%
summarise(prop_positive = mean(cosine_diff_binary))
cosine_df_h2_ls[[3]]
cosine_df_h2_ls[[2]]
cosine_df_h2_ls[[1]]
# check each model's performance (as in differentiating conceptually similar from disimilar questions)
cosine_df_h2_ls[[3]] %>%
group_by(final_id, form_request, similarity) %>%
summarise(cosine_score_ave = mean(cosine_score)) %>%
ungroup() %>%
group_by(final_id) %>%
mutate(cosine_diff = cosine_score_ave - cosine_score_ave[similarity == "dissimilar"]) %>%
ungroup() %>%
filter(similarity == "reference") %>%
mutate(cosine_diff_binary = if_else(cosine_diff > 0, 1, 0)) %>%
summarise(prop_positive = mean(cosine_diff_binary))
cosine_df_h2_ls[[3]]
cosine_df_h2_ls[[4]]
# model 1: 0.982
# model 2: 0.969
# model 3: 0.956
# model 4: 0.994
cosine_df_h2_ls[[5]]
# model 1: 0.982
# model 2: 0.969
# model 3: 0.956
# model 4: 0.994
cosine_df_h2_ls[[6]]
# model 1: 0.982
# model 2: 0.969
# model 3: 0.956
# model 4: 0.994
cosine_df_h2_ls[[7]]
# model 1: 0.982
# model 2: 0.969
# model 3: 0.956
# model 4: 0.994
cosine_df_h2_ls[[8]]
# model 1: 0.982
# model 2: 0.969
# model 3: 0.956
# model 4: 0.994
cosine_df_h2_ls[[9]]
# model 1: 0.982
# model 2: 0.969
# model 3: 0.956
# model 4: 0.994
cosine_df_h2_ls[[10]]
# model 1: 0.982
# model 2: 0.969
# model 3: 0.956
# model 4: 0.994
cosine_df_h2_ls[[11]]
# model 1: 0.982
# model 2: 0.969
# model 3: 0.956
# model 4: 0.994
cosine_df_h2_ls[[12]]
# model 1: 0.982
# model 2: 0.969
# model 3: 0.956
# model 4: 0.994
cosine_df_h2_ls[[13]]
cosine_df_h2_ls
Jaccard_df
cosine_df_h2_ls %>%
bind_rows() %>%
group_by(Model, final_id, form_request, similarity) %>%
summarise(cosine_score_ave = mean(cosine_score)) %>%
ungroup() %>%
group_by(final_id, Model) %>%
mutate(cosine_diff = cosine_score_ave - cosine_score_ave[similarity == "dissimilar"]) %>%
ungroup() %>%
bind_rows(Jaccard_df) %>%
sample_frac(0.1) %>%
filter(similarity == "reference") %>%
left_join(final_id_to_concepts)
Jaccard_df <-
cosine_df_h2_ls[[1]] %>%
group_by(Model, final_id, form_request, similarity) %>%
summarise(jaccard_score_ave = mean(jaccard_score)) %>%
ungroup() %>%
group_by(final_id, Model) %>%
mutate(jaccard_diff = jaccard_score_ave - jaccard_score_ave[similarity == "dissimilar"]) %>%
ungroup() %>%
mutate(Model = "Jaccard") %>%
rename(cosine_score_ave = jaccard_score_ave,
cosine_diff = jaccard_diff)
cosine_df_h2_ls %>%
bind_rows() %>%
group_by(Model, final_id, form_request, similarity) %>%
summarise(cosine_score_ave = mean(cosine_score)) %>%
ungroup() %>%
group_by(final_id, Model) %>%
mutate(cosine_diff = cosine_score_ave - cosine_score_ave[similarity == "dissimilar"]) %>%
ungroup() %>%
bind_rows(Jaccard_df)
Jaccard_df
Jaccard_df %>% filter(similarity == "reference") %>%
mutate(cosine_diff_binary = if_else(cosine_diff > 0, 1, 0)) %>%
summarise(prop_positive = mean(cosine_diff_binary))
Jaccard_df
# check each model's performance (as in differentiating conceptually similar from disimilar questions)
cosine_df_h2_ls[[1]] %>%
group_by(final_id, form_request, similarity) %>%
summarise(cosine_score_ave = mean(cosine_score)) %>%
ungroup() %>%
group_by(final_id) %>%
mutate(cosine_diff = cosine_score_ave - cosine_score_ave[similarity == "dissimilar"]) %>%
ungroup() %>%
filter(similarity == "reference") %>%
mutate(cosine_diff_binary = if_else(cosine_diff > 0, 1, 0)) %>%
summarise(prop_positive = mean(cosine_diff_binary))
Jaccard_df %>% filter(similarity == "reference") %>%
mutate(cosine_diff_binary = if_else(cosine_diff > 0, 1, 0)) %>%
summarise(prop_positive = mean(cosine_diff_binary))
cosine_df_h2_ls[[1]]
# check each model's performance (as in differentiating conceptually similar from disimilar questions)
cosine_df_h2_ls[[1]] %>%
group_by(final_id, form_request, similarity) %>%
summarise(cosine_score_ave = mean(cosine_score)) %>%
ungroup() %>%
group_by(final_id) %>%
mutate(cosine_diff = cosine_score_ave - cosine_score_ave[similarity == "dissimilar"]) %>%
ungroup() %>%
filter(similarity == "reference") %>%
mutate(cosine_diff_binary = if_else(cosine_diff > 0, 1, 0)) %>%
summarise(prop_positive = mean(cosine_diff_binary))
Jaccard_df %>% filter(similarity == "reference") %>%
group_by(final_id, form_request, similarity) %>%
summarise(cosine_score_ave = mean(cosine_score)) %>%
ungroup() %>%
group_by(final_id) %>%
mutate(cosine_diff_binary = if_else(cosine_diff > 0, 1, 0)) %>%
summarise(prop_positive = mean(cosine_diff_binary))
Jaccard_df
Jaccard_df %>% filter(similarity == "reference") %>%
mutate(cosine_diff_binary = if_else(cosine_diff > 0, 1, 0)) %>%
summarise(prop_positive = mean(cosine_diff_binary))
cosine_df_h2_ls[[1]]
cosine_df_h2_ls[[2]]
# check each model's performance (as in differentiating conceptually similar from disimilar questions)
cosine_df_h2_ls[[2]] %>%
group_by(final_id, form_request, similarity) %>%
summarise(cosine_score_ave = mean(cosine_score)) %>%
ungroup() %>%
group_by(final_id) %>%
mutate(cosine_diff = cosine_score_ave - cosine_score_ave[similarity == "dissimilar"]) %>%
ungroup() %>%
filter(similarity == "reference") %>%
mutate(cosine_diff_binary = if_else(cosine_diff > 0, 1, 0)) %>%
summarise(prop_positive = mean(cosine_diff_binary))
cosine_df_h2_ls[[9]]
# check each model's performance (as in differentiating conceptually similar from disimilar questions)
cosine_df_h2_ls[[9]] %>%
group_by(final_id, form_request, similarity) %>%
summarise(cosine_score_ave = mean(cosine_score)) %>%
ungroup() %>%
group_by(final_id) %>%
mutate(cosine_diff = cosine_score_ave - cosine_score_ave[similarity == "dissimilar"]) %>%
ungroup() %>%
filter(similarity == "reference") %>%
mutate(cosine_diff_binary = if_else(cosine_diff > 0, 1, 0)) %>%
summarise(prop_positive = mean(cosine_diff_binary))

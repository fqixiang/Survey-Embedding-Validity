#baseline ave_person, MAE and r
ave_person_mae = mae(data$y_true, data$ave_person_pred)
ave_person_mae_vec = c(ave_person_mae_vec, ave_person_mae)
ave_person_r_ojb = cor.test(data$y_true, data$ave_person_pred)
ave_person_r = as.vector(ave_person_r_ojb$estimate)
ave_person_r_vec = c(ave_person_r_vec, ave_person_r)
}
print(paste("MAE based on midpoint is:", weighted.mean(midpoint_mae_vec, weight_vec)))
print(paste("MAE based on average is:", weighted.mean(ave_all_mae_vec, weight_vec)))
print(paste("MAE based on within-person average is:", weighted.mean(ave_person_mae_vec, weight_vec)))
print(paste("r based on within-person average is:", weighted.mean(ave_person_r_vec, weight_vec)))
print(paste("SD of r is:", sd(ave_person_r_vec)))
print(paste("length of r is:", length(ave_person_r_vec)))
print(paste("SE of r is:", sd(ave_person_r_vec)/sqrt(length(ave_person_r_vec))))
}
compute_baselines(results)
compute_baselines <- function(results) {
midpoint_mae_vec = as.numeric()
ave_all_mae_vec = as.numeric()
ave_person_mae_vec = as.numeric()=
ave_person_r_vec = as.numeric()
weight_vec = as.numeric()
for (i in 0:9) {
data = results %>%
filter(fold_id == i)
#fold size
weight = dim(data)[1]
weight_vec = c(weight_vec, weight)
#baseline midpoint, MAE
midpoint_mae = mae(data$y_true, rep(0.5, weight))
midpoint_mae_vec = c(midpoint_mae_vec, midpoint_mae)
#baseline ave_all, MAE
ave_all_mae = mae(data$y_true, data$ave_all_pred)
ave_all_mae_vec = c(ave_all_mae_vec, ave_all_mae)
#baseline ave_person, MAE and r
ave_person_mae = mae(data$y_true, data$ave_person_pred)
ave_person_mae_vec = c(ave_person_mae_vec, ave_person_mae)
ave_person_r_ojb = cor.test(data$y_true, data$ave_person_pred)
ave_person_r = as.vector(ave_person_r_ojb$estimate)
ave_person_r_vec = c(ave_person_r_vec, ave_person_r)
}
print(paste("MAE based on midpoint is:", weighted.mean(midpoint_mae_vec, weight_vec)))
print(paste("MAE based on average is:", weighted.mean(ave_all_mae_vec, weight_vec)))
print(paste("MAE based on within-person average is:", weighted.mean(ave_person_mae_vec, weight_vec)))
print(paste("r based on within-person average is:", weighted.mean(ave_person_r_vec, weight_vec)))
print(paste("SD of r is:", sd(ave_person_r_vec)))
#print(paste("length of r is:", length(ave_person_r_vec)))
#print(paste("SE of r is:", sd(ave_person_r_vec)/sqrt(length(ave_person_r_vec))))
}
compute_baselines(results)
results
compute_baselines <- function(results) {
midpoint_mae_vec = as.numeric()
ave_all_mae_vec = as.numeric()
ave_person_mae_vec = as.numeric()
ave_person_r_vec = as.numeric()
weight_vec = as.numeric()
for (i in 0:9) {
data = results %>%
filter(fold_id == i)
#fold size
weight = dim(data)[1]
weight_vec = c(weight_vec, weight)
#baseline midpoint, MAE
midpoint_mae = mae(data$y_true, rep(0.5, weight))
midpoint_mae_vec = c(midpoint_mae_vec, midpoint_mae)
#baseline ave_all, MAE
ave_all_mae = mae(data$y_true, data$ave_all_pred)
ave_all_mae_vec = c(ave_all_mae_vec, ave_all_mae)
#baseline ave_person, MAE and r
ave_person_mae = mae(data$y_true, data$ave_person_pred)
ave_person_mae_vec = c(ave_person_mae_vec, ave_person_mae)
ave_person_r_ojb = cor.test(data$y_true, data$ave_person_pred)
ave_person_r = as.vector(ave_person_r_ojb$estimate)
ave_person_r_vec = c(ave_person_r_vec, ave_person_r)
}
print(paste("MAE based on midpoint is:", weighted.mean(midpoint_mae_vec, weight_vec)))
print(paste("MAE based on average is:", weighted.mean(ave_all_mae_vec, weight_vec)))
print(paste("MAE based on within-person average is:", weighted.mean(ave_person_mae_vec, weight_vec)))
print(paste("r based on within-person average is:", weighted.mean(ave_person_r_vec, weight_vec)))
print(paste("SD of r is:", sd(ave_person_r_vec)))
print(paste("length of r is:", length(ave_person_r_vec)))
print(paste("SE of r is:", sd(ave_person_r_vec)/sqrt(length(ave_person_r_vec))))
}
compute_baselines(results)
results
results1
results2
results %>%
filter(feature == "count") %>%
compute_baselines()
results %>%
filter(feature == "count")
results %>%
filter(feature == "count") %>%
dim()[1]
results %>%
filter(feature == "count") %>%
dim()
results %>%
filter(feature == "count") %>%
dim()[[1]]
results %>%
filter(feature == "count") %>%
row_number()
results %>%
filter(feature == "count") %>%
nrow()
compute_baselines <- function(results) {
midpoint_mae_vec = as.numeric()
ave_all_mae_vec = as.numeric()
ave_person_mae_vec = as.numeric()
ave_person_r_vec = as.numeric()
weight_vec = as.numeric()
sample_size = nrow(results)
for (i in 0:9) {
data = results %>%
filter(fold_id == i)
#fold size
weight = dim(data)[1]
weight_vec = c(weight_vec, weight)
#baseline midpoint, MAE
midpoint_mae = mae(data$y_true, rep(0.5, weight))
midpoint_mae_vec = c(midpoint_mae_vec, midpoint_mae)
#baseline ave_all, MAE
ave_all_mae = mae(data$y_true, data$ave_all_pred)
ave_all_mae_vec = c(ave_all_mae_vec, ave_all_mae)
#baseline ave_person, MAE and r
ave_person_mae = mae(data$y_true, data$ave_person_pred)
ave_person_mae_vec = c(ave_person_mae_vec, ave_person_mae)
ave_person_r_ojb = cor.test(data$y_true, data$ave_person_pred)
ave_person_r = as.vector(ave_person_r_ojb$estimate)
ave_person_r_vec = c(ave_person_r_vec, ave_person_r)
}
print(paste("MAE based on midpoint is:", weighted.mean(midpoint_mae_vec, weight_vec)))
print(paste("MAE based on average is:", weighted.mean(ave_all_mae_vec, weight_vec)))
print(paste("MAE based on within-person average is:", weighted.mean(ave_person_mae_vec, weight_vec)))
print(paste("r based on within-person average is:", weighted.mean(ave_person_r_vec, weight_vec)))
print(paste("SE of r is:", sd(ave_person_r_vec)/sqrt(sample_size)))
}
results %>%
filter(feature == "count") %>%
compute_baselines()
compute_baselines <- function(results) {
midpoint_mae_vec = as.numeric()
ave_all_mae_vec = as.numeric()
ave_person_mae_vec = as.numeric()
ave_person_r_vec = as.numeric()
weight_vec = as.numeric()
sample_size = nrow(results)
for (i in 0:9) {
data = results %>%
filter(fold_id == i)
#fold size
weight = dim(data)[1]
weight_vec = c(weight_vec, weight)
#baseline midpoint, MAE
midpoint_mae = mae(data$y_true, rep(0.5, weight))
midpoint_mae_vec = c(midpoint_mae_vec, midpoint_mae)
#baseline ave_all, MAE
ave_all_mae = mae(data$y_true, data$ave_all_pred)
ave_all_mae_vec = c(ave_all_mae_vec, ave_all_mae)
#baseline ave_person, MAE and r
ave_person_mae = mae(data$y_true, data$ave_person_pred)
ave_person_mae_vec = c(ave_person_mae_vec, ave_person_mae)
ave_person_r_ojb = cor.test(data$y_true, data$ave_person_pred)
ave_person_r = as.vector(ave_person_r_ojb$estimate)
ave_person_r_vec = c(ave_person_r_vec, ave_person_r)
}
r_within_person_ave = weighted.mean(ave_person_r_vec, weight_vec)
print(paste("MAE based on midpoint is:", weighted.mean(midpoint_mae_vec, weight_vec)))
print(paste("MAE based on average is:", weighted.mean(ave_all_mae_vec, weight_vec)))
print(paste("MAE based on within-person average is:", weighted.mean(ave_person_mae_vec, weight_vec)))
print(paste("r based on within-person average is:", r_within_person_ave))
print(paste("SE of r is:", sqrt((1-r_within_person_ave^2)/(sample_size-2))))
}
results %>%
filter(feature == "count") %>%
compute_baselines()
compute_model_performance <- function(results, model_name, feature_name) {
data_all = results %>%
filter(model == model_name,
feature == feature_name)
mae_score_vec = as.numeric()
r_vec = as.numeric()
weight_vec = as.numeric()
for (i in 0:9) {
data = data_all %>%
filter(fold_id == i)
#fold size
weight = dim(data)[1]
weight_vec = c(weight_vec, weight)
#MAE and r
mae_score = mae(data$y_true, data$y_pred)
mae_score_vec = c(mae_score_vec, mae_score)
r_ojb = cor.test(data$y_true, data$y_pred)
r = as.vector(r_ojb$estimate)
r_vec = c(r_vec, r)
}
r = weighted.mean(r_vec, weight_vec, na.rm = TRUE)
print(paste(model_name, feature_name))
print(paste("MAE:", weighted.mean(mae_score_vec, weight_vec, na.rm = TRUE)))
print(paste("r:", r))
print(paste("Change is:", (r - 0.187)/0.187*100))
print(paste("SE is:", sqrt((1-r^2)/(sample_size-2))))
}
compute_model_performance(results, model = "lasso", feature = "count")
compute_model_performance <- function(results, model_name, feature_name) {
data_all = results %>%
filter(model == model_name,
feature == feature_name)
mae_score_vec = as.numeric()
r_vec = as.numeric()
weight_vec = as.numeric()
sample_size = nrow(data_all)
for (i in 0:9) {
data = data_all %>%
filter(fold_id == i)
#fold size
weight = dim(data)[1]
weight_vec = c(weight_vec, weight)
#MAE and r
mae_score = mae(data$y_true, data$y_pred)
mae_score_vec = c(mae_score_vec, mae_score)
r_ojb = cor.test(data$y_true, data$y_pred)
r = as.vector(r_ojb$estimate)
r_vec = c(r_vec, r)
}
r = weighted.mean(r_vec, weight_vec, na.rm = TRUE)
print(paste(model_name, feature_name))
print(paste("MAE:", weighted.mean(mae_score_vec, weight_vec, na.rm = TRUE)))
print(paste("r:", r))
print(paste("Change is:", (r - 0.187)/0.187*100))
print(paste("SE is:", sqrt((1-r^2)/(sample_size-2))))
}
compute_model_performance(results, model = "lasso", feature = "count")
print(paste("Upper 95% CI of r is:", r_within_person_ave + 1.96*r_se))
compute_baselines <- function(results) {
midpoint_mae_vec = as.numeric()
ave_all_mae_vec = as.numeric()
ave_person_mae_vec = as.numeric()
ave_person_r_vec = as.numeric()
weight_vec = as.numeric()
sample_size = nrow(results)
for (i in 0:9) {
data = results %>%
filter(fold_id == i)
#fold size
weight = dim(data)[1]
weight_vec = c(weight_vec, weight)
#baseline midpoint, MAE
midpoint_mae = mae(data$y_true, rep(0.5, weight))
midpoint_mae_vec = c(midpoint_mae_vec, midpoint_mae)
#baseline ave_all, MAE
ave_all_mae = mae(data$y_true, data$ave_all_pred)
ave_all_mae_vec = c(ave_all_mae_vec, ave_all_mae)
#baseline ave_person, MAE and r
ave_person_mae = mae(data$y_true, data$ave_person_pred)
ave_person_mae_vec = c(ave_person_mae_vec, ave_person_mae)
ave_person_r_ojb = cor.test(data$y_true, data$ave_person_pred)
ave_person_r = as.vector(ave_person_r_ojb$estimate)
ave_person_r_vec = c(ave_person_r_vec, ave_person_r)
}
r_within_person_ave = weighted.mean(ave_person_r_vec, weight_vec)
r_se = sqrt((1-r_within_person_ave^2)/(sample_size-2))
print(paste("MAE based on midpoint is:", weighted.mean(midpoint_mae_vec, weight_vec)))
print(paste("MAE based on average is:", weighted.mean(ave_all_mae_vec, weight_vec)))
print(paste("MAE based on within-person average is:", weighted.mean(ave_person_mae_vec, weight_vec)))
print(paste("r based on within-person average is:", r_within_person_ave))
print(paste("Lower 95% CI of r is:", r_within_person_ave - 1.96*r_se))
print(paste("Upper 95% CI of r is:", r_within_person_ave + 1.96*r_se))
}
results %>%
filter(feature == "count") %>%
compute_baselines()
compute_model_performance <- function(results, model_name, feature_name) {
data_all = results %>%
filter(model == model_name,
feature == feature_name)
mae_score_vec = as.numeric()
r_vec = as.numeric()
weight_vec = as.numeric()
sample_size = nrow(data_all)
for (i in 0:9) {
data = data_all %>%
filter(fold_id == i)
#fold size
weight = dim(data)[1]
weight_vec = c(weight_vec, weight)
#MAE and r
mae_score = mae(data$y_true, data$y_pred)
mae_score_vec = c(mae_score_vec, mae_score)
r_ojb = cor.test(data$y_true, data$y_pred)
r = as.vector(r_ojb$estimate)
r_vec = c(r_vec, r)
}
r = weighted.mean(r_vec, weight_vec, na.rm = TRUE)
r_se = sqrt((1-r^2)/(sample_size-2))
print(paste(model_name, feature_name))
print(paste("MAE:", weighted.mean(mae_score_vec, weight_vec, na.rm = TRUE)))
print(paste("r:", r))
print(paste("Change is:", (r - 0.187)/0.187*100))
print(paste("SE is:", r_se))
print(paste("Lower 95% CI of r is:", r - 1.96*r_se))
print(paste("Upper 95% CI of r is:", r + 1.96*r_se))
}
compute_model_performance(results, model = "lasso", feature = "count")
compute_model_performance(results, model = "lasso", feature = "tf_idf")
compute_model_performance(results, model = "lasso", feature = "random300")
compute_model_performance(results, model = "lasso", feature = "random768")
compute_model_performance(results, model = "lasso", feature = "random1024")
compute_model_performance(results, model = "lasso", feature = "ESS_fasttext")
compute_model_performance(results, model = "lasso", feature = "ESS_glove")
compute_model_performance(results, model = "lasso", feature = "ESS_bert_base_uncased")
compute_model_performance(results, model = "lasso", feature = "ESS_bert_large_uncased")
compute_model_performance(results, model = "lasso", feature = "ESS_all_distilroberta_v1")
compute_model_performance(results, model = "lasso", feature = "ESS_all_mpnet_base_v2")
compute_model_performance(results, model = "lasso", feature = "ESS_USE")
compute_model_performance(results, model = "rf", feature = "count")
compute_model_performance(results, model = "rf", feature = "tf_idf")
compute_model_performance(results, model = "rf", feature = "random300")
compute_model_performance(results, model = "rf", feature = "random768")
compute_model_performance(results, model = "rf", feature = "random1024")
compute_model_performance(results, model = "rf", feature = "ESS_fasttext")
compute_model_performance(results, model = "rf", feature = "ESS_glove")
compute_model_performance(results, model = "rf", feature = "ESS_bert_base_uncased")
compute_model_performance(results, model = "rf", feature = "ESS_bert_large_uncased")
compute_model_performance(results, model = "rf", feature = "ESS_all_distilroberta_v1")
compute_model_performance(results, model = "rf", feature = "ESS_all_mpnet_base_v2")
compute_model_performance(results, model = "rf", feature = "ESS_USE")
compute_baselines <- function(results) {
midpoint_mae_vec = as.numeric()
ave_all_mae_vec = as.numeric()
ave_person_mae_vec = as.numeric()
ave_person_r_vec = as.numeric()
weight_vec = as.numeric()
sample_size = nrow(results)
for (i in 0:9) {
data = results %>%
filter(fold_id == i)
#fold size
weight = dim(data)[1]
weight_vec = c(weight_vec, weight)
#baseline midpoint, MAE
midpoint_mae = mae(data$y_true, rep(0.5, weight))
midpoint_mae_vec = c(midpoint_mae_vec, midpoint_mae)
#baseline ave_all, MAE
ave_all_mae = mae(data$y_true, data$ave_all_pred)
ave_all_mae_vec = c(ave_all_mae_vec, ave_all_mae)
#baseline ave_person, MAE and r
ave_person_mae = mae(data$y_true, data$ave_person_pred)
ave_person_mae_vec = c(ave_person_mae_vec, ave_person_mae)
ave_person_r_ojb = cor.test(data$y_true, data$ave_person_pred)
ave_person_r = as.vector(ave_person_r_ojb$estimate)
ave_person_r_vec = c(ave_person_r_vec, ave_person_r)
}
r_within_person_ave = weighted.mean(ave_person_r_vec, weight_vec)
r_se = sqrt((1-r_within_person_ave^2)/(sample_size-2))
r_se = r_within_person_ave/sqrt(10)
print(paste("MAE based on midpoint is:", weighted.mean(midpoint_mae_vec, weight_vec)))
print(paste("MAE based on average is:", weighted.mean(ave_all_mae_vec, weight_vec)))
print(paste("MAE based on within-person average is:", weighted.mean(ave_person_mae_vec, weight_vec)))
print(paste("r based on within-person average is:", r_within_person_ave))
print(paste("Lower 95% CI of r is:", r_within_person_ave - 1.96*r_se))
print(paste("Upper 95% CI of r is:", r_within_person_ave + 1.96*r_se))
}
results %>%
filter(feature == "count") %>%
compute_baselines()
compute_baselines <- function(results) {
midpoint_mae_vec = as.numeric()
ave_all_mae_vec = as.numeric()
ave_person_mae_vec = as.numeric()
ave_person_r_vec = as.numeric()
weight_vec = as.numeric()
sample_size = nrow(results)
for (i in 0:9) {
data = results %>%
filter(fold_id == i)
#fold size
weight = dim(data)[1]
weight_vec = c(weight_vec, weight)
#baseline midpoint, MAE
midpoint_mae = mae(data$y_true, rep(0.5, weight))
midpoint_mae_vec = c(midpoint_mae_vec, midpoint_mae)
#baseline ave_all, MAE
ave_all_mae = mae(data$y_true, data$ave_all_pred)
ave_all_mae_vec = c(ave_all_mae_vec, ave_all_mae)
#baseline ave_person, MAE and r
ave_person_mae = mae(data$y_true, data$ave_person_pred)
ave_person_mae_vec = c(ave_person_mae_vec, ave_person_mae)
ave_person_r_ojb = cor.test(data$y_true, data$ave_person_pred)
ave_person_r = as.vector(ave_person_r_ojb$estimate)
ave_person_r_vec = c(ave_person_r_vec, ave_person_r)
}
r_within_person_ave = weighted.mean(ave_person_r_vec, weight_vec)
r_se = sqrt((1-r_within_person_ave^2)/(sample_size-2))
print(paste("MAE based on midpoint is:", weighted.mean(midpoint_mae_vec, weight_vec)))
print(paste("MAE based on average is:", weighted.mean(ave_all_mae_vec, weight_vec)))
print(paste("MAE based on within-person average is:", weighted.mean(ave_person_mae_vec, weight_vec)))
print(paste("r based on within-person average is:", r_within_person_ave))
print(paste("Lower 95% CI of r is:", r_within_person_ave - 1.96*r_se))
print(paste("Upper 95% CI of r is:", r_within_person_ave + 1.96*r_se))
}
results %>%
filter(feature == "count") %>%
compute_baselines()
compute_model_performance <- function(results, model_name, feature_name) {
data_all = results %>%
filter(model == model_name,
feature == feature_name)
mae_score_vec = as.numeric()
r_vec = as.numeric()
weight_vec = as.numeric()
sample_size = nrow(data_all)
for (i in 0:9) {
data = data_all %>%
filter(fold_id == i)
#fold size
weight = dim(data)[1]
weight_vec = c(weight_vec, weight)
#MAE and r
mae_score = mae(data$y_true, data$y_pred)
mae_score_vec = c(mae_score_vec, mae_score)
r_ojb = cor.test(data$y_true, data$y_pred)
r = as.vector(r_ojb$estimate)
r_vec = c(r_vec, r)
}
r = weighted.mean(r_vec, weight_vec, na.rm = TRUE)
r_se = sqrt((1-r^2)/(sample_size-2))
print(paste(model_name, feature_name))
print(paste("MAE:", weighted.mean(mae_score_vec, weight_vec, na.rm = TRUE)))
print(paste("r:", r))
print(paste("Change is:", (r - 0.187)/0.187*100))
print(paste("SE is:", r_se))
print(paste("Lower 95% CI of r is:", r - 1.96*r_se))
print(paste("Upper 95% CI of r is:", r + 1.96*r_se))
}
compute_model_performance(results, model = "lasso", feature = "count")
compute_model_performance(results, model = "lasso", feature = "tf_idf")
compute_model_performance(results, model = "lasso", feature = "random300")
compute_model_performance(results, model = "lasso", feature = "random768")
compute_model_performance(results, model = "lasso", feature = "random1024")
compute_model_performance(results, model = "lasso", feature = "ESS_fasttext")
compute_model_performance(results, model = "lasso", feature = "ESS_glove")
compute_model_performance(results, model = "lasso", feature = "ESS_bert_base_uncased")
compute_model_performance(results, model = "lasso", feature = "ESS_bert_large_uncased")
compute_model_performance(results, model = "lasso", feature = "ESS_all_distilroberta_v1")
compute_model_performance(results, model = "lasso", feature = "ESS_all_mpnet_base_v2")
compute_model_performance(results, model = "lasso", feature = "ESS_USE")
compute_model_performance(results, model = "rf", feature = "count")
compute_model_performance(results, model = "rf", feature = "tf_idf")
compute_model_performance(results, model = "rf", feature = "random300")
compute_model_performance(results, model = "rf", feature = "random768")
compute_model_performance(results, model = "rf", feature = "random1024")
compute_model_performance(results, model = "rf", feature = "ESS_fasttext")
compute_model_performance(results, model = "rf", feature = "ESS_glove")
compute_model_performance(results, model = "rf", feature = "ESS_bert_base_uncased")
compute_model_performance(results, model = "rf", feature = "ESS_all_distilroberta_v1")
compute_model_performance(results, model = "rf", feature = "ESS_bert_large_uncased")
compute_model_performance(results, model = "rf", feature = "ESS_all_distilroberta_v1")
compute_model_performance(results, model = "rf", feature = "ESS_all_mpnet_base_v2")
compute_model_performance(results, model = "rf", feature = "ESS_USE")
setwd("~/GitHub/sentence_embeddings_for_surveys")
library(tidyverse)
library(Metrics)
results1 <- read_csv('results1.csv')
results2 <- read_csv('results2.csv')
results3 <- read_csv('results3.csv')
results4 <- read_csv('results4.csv')
results5 <- read_csv('results5.csv')
results = bind_rows(results1, results2, results3, results4, results5)
results %>%
distinct(feature)
compute_baselines <- function(results) {
midpoint_mae_vec = as.numeric()
ave_all_mae_vec = as.numeric()
ave_person_mae_vec = as.numeric()
ave_person_r_vec = as.numeric()
weight_vec = as.numeric()
sample_size = nrow(results)
for (i in 0:9) {
data = results %>%
filter(fold_id == i)
#fold size
weight = dim(data)[1]
weight_vec = c(weight_vec, weight)
#baseline midpoint, MAE
midpoint_mae = mae(data$y_true, rep(0.5, weight))
midpoint_mae_vec = c(midpoint_mae_vec, midpoint_mae)
#baseline ave_all, MAE
ave_all_mae = mae(data$y_true, data$ave_all_pred)
ave_all_mae_vec = c(ave_all_mae_vec, ave_all_mae)
#baseline ave_person, MAE and r
ave_person_mae = mae(data$y_true, data$ave_person_pred)
ave_person_mae_vec = c(ave_person_mae_vec, ave_person_mae)
ave_person_r_ojb = cor.test(data$y_true, data$ave_person_pred)
ave_person_r = as.vector(ave_person_r_ojb$estimate)
ave_person_r_vec = c(ave_person_r_vec, ave_person_r)
}
r_within_person_ave = weighted.mean(ave_person_r_vec, weight_vec)
r_se = sqrt((1-r_within_person_ave^2)/(sample_size-2))
print(paste("MAE based on midpoint is:", weighted.mean(midpoint_mae_vec, weight_vec)))
print(paste("MAE based on average is:", weighted.mean(ave_all_mae_vec, weight_vec)))
print(paste("MAE based on within-person average is:", weighted.mean(ave_person_mae_vec, weight_vec)))
print(paste("r based on within-person average is:", r_within_person_ave))
print(paste("Lower 95% CI of r is:", r_within_person_ave - 1.96*r_se))
print(paste("Upper 95% CI of r is:", r_within_person_ave + 1.96*r_se))
}
results %>%
filter(feature == "count") %>%
compute_baselines()
